name: docker-sif-deploy

on:
  push:
    branches:
      - "main"

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Get Latest Tag
        run: |
            # Get the latest tag, we won't build if it's the current
            git fetch --tags
            latest_tag=$(git tag | tail -1)
            echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - name: Define Repository Name and Release Version
        run: |
            repo=$(echo "${GITHUB_REPOSITORY/\//-}")
            release=$(cat VERSION)
            echo "reponame=$repo" >> $GITHUB_ENV
            echo "release_tag=$release" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        if: ${{ env.release_tag != env.latest_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: Release ${{ env.release_tag }}
          draft: false
          prerelease: false
      - name: Get Dockerfile image tag
        run: |
          owner=${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}
          repo=${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}
          echo "owner is $owner"
          echo "repo is $repo."
          recipe=$(ls Dockerfile*)
          echo "Building $recipe"
          tag=$(echo "${recipe/Dockerfile\./}")
          # If we find empty, use latest
          if [ "$tag" == "Dockerfile" ]; then
              tag=latest
          fi
          # Build the container and name by tag
          echo "Tag is $tag."
          echo "recipe=$recipe" >> $GITHUB_ENV
          echo "owner=$owner" >> $GITHUB_ENV
          echo "reponame=$repo" >> $GITHUB_ENV
          echo "image_tag=$tag" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ${{ env.recipe }}
          tags: |
            ghcr.io/${{ env.owner }}/${{ env.reponame }}:${{ env.image_tag }}
      - uses: eWaterCycle/setup-singularity@v6
        with:
          singularity-version: 3.7.1
      - name: Pull the singularity containers
        run: |
          singularity remote login --username ${{ github.repository_owner }} --password ${{ secrets.CR_PAT }} docker://ghcr.io
          singularity build --fakeroot \
            ${{ env.reponame }}:${{ env.image_tag }}.sif \
            docker://ghcr.io/${{ env.owner }}/${{ env.reponame }}:${{ env.image_tag }}
      - name: Upload Release Assets
        if: ${{ env.release_tag != env.latest_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          tag_name: ${{ env.release_tag }}
        run: |
          hub release edit $(find . -type f -name "*.sif" -printf "-a %p ") -m "" "$tag_name" 
